name: OpenWrt 24.10-SNAPSHOT build

on:
  push:
    branches:
      - master
  schedule:
    - cron: '* 4 * * *'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      OPENWRT_VERSION: 24.10-SNAPSHOT

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: albrechtL/openwrt-docker

      - name: Set environment variables
        run: |
          echo "GIT_HASH=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host # Important to access local Docker registry

      - name: Build Docker image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: .
          push: true
          provenance: false
          platforms: |
            linux/x86_64
          build-args: | 
            OPENWRT_VERSION=${{ env.OPENWRT_VERSION }}
            BUILDKIT_MULTI_PLATFORM=1
          tags: |
            localhost:5000/local/openwrt-docker:latest

      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/local/openwrt-docker:latest

      - name: Build and export
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: . # TODO: Just for testing
          tags: openwrt-docker:latest
          outputs: type=docker,dest=/tmp/openwrt-docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt Docker Image
          path: /tmp/openwrt-docker-image.tar

      - name: Login to Weidmueller wmucdev
        uses: docker/login-action@v3
        with:
          registry: wmucdev.azurecr.io
          username: ${{ secrets.WMUCDEV_USERNAME }}
          password: ${{ secrets.WMUCDEV_TOKEN }}

      - name: Create Weidmueller u-OS app
        id: create_u-os-app
        run: |
          # uc-aom-packager accept only version that has to be greater than the previous one. Lets use the datetime to ensure that.
          DATETIME=$(date "+%Y%m%d%H%M%S")

          # uc-aom-packager allow only decimal numbers as version number for an unkonwn reason
          # see https://github.com/weidmueller/uc-addon/blob/main/uc-manifest.schema-doc.md#version)
          # So lets convert the git hash into a decimal value
          GIT_HASH_DECIMAL=$((16#$GIT_HASH))

          # Create app version
          #APP_VERSION=$OPENWRT_VERSION.$DATETIME-$GIT_HASH_DECIMAL
          APP_VERSION=24.10.99.$DATETIME-$GIT_HASH_DECIMAL # TODO just for SNAPSHOT

          echo "***** Create manifest from template *****"
          mv u-os-app/manifest.json.template u-os-app/manifest.json
          sed -i 's/APPVERSION_TO_INSERT/'"$APP_VERSION"'/g' u-os-app/manifest.json
          cat u-os-app/manifest.json | grep version
        
          echo "***** Run uc-aom-packager to create the u-OS app *****"
          # uc-aom-packager accepts only multiarch images. "--build-arg BUILDKIT_MULTI_PLATFORM=1" has to set to ensure that.
          # uc-aom-packager needs to Docker registry credentials in a clear text file. Because of security concerns we use a local registry without credentials here.

          docker run --rm --network=host --pull=always \
          --mount src=$(pwd)/u-os-app,target=/tmp/u-os-app-openwrt,type=bind wmucdev.azurecr.io/u-control/uc-aom-packager:0 \
          uc-aom-packager push \
          -m /tmp/u-os-app-openwrt \
          -s /tmp/u-os-app-openwrt/source-credentials.json \
          -t /tmp/u-os-app-openwrt/target-credentials.json \
          -v

          echo "***** Create SWU app file*****"
          docker run --rm --network=host --pull=always \
          --mount src=$(pwd)/u-os-app,target=/tmp/u-os-app-openwrt,type=bind wmucdev.azurecr.io/u-control/uc-aom-packager:0 \
          uc-aom-packager \
          export \
          -t /tmp/u-os-app-openwrt/target-credentials.json \
          --version $APP_VERSION \
          -o /tmp/u-os-app-openwrt/u-os-app-openwrt_$APP_VERSION.swu \
          -v

          find u-os-app/

      - name: Archive artifacts (OpenWrt u-OS app)
        if: always() && steps.create_u-os-app.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt u-OS app
          path: u-os-app/u-os-app-openwrt_*.swu/linux-arm64/*.swu
          #if-no-files-found: error

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: OpenWrt Docker Image
          path: .

      - name: Install VMs
        run: |
          set -x
          sudo snap install multipass --edge # Edge is necessary to get 1.15 dev because of networks support
          sudo chmod a+w /var/snap/multipass/common/multipass_socket # Fix 'multipass socket access denied'
          multipass find

          # Set up some bridges for the VMs
          sudo ip link add lannetvm type bridge
          sudo ip link add wannetvm type bridge
          sudo ip link set dev lannetvm up
          sudo ip link set dev wannetvm up
          ip addr

          # We need to disable the firewall otherwise the tap devices are not working properly
          sudo ufw disable

          # Start VMs
          # Multipass and the OpenWrt container are using the same MAC QUI 52:54:00 which creates error. Let's use differnet MAC addresses here
          multipass launch docker --network name=wannetvm,mac=06:00:00:11:22:33 --network name=lannetvm,mac=06:00:00:44:55:66 --name router-vm
          multipass mount $GITHUB_WORKSPACE router-vm

          multipass launch --network wannetvm --name wan-vm
          multipass launch --network lannetvm --name lan-vm

      - name: Show VM and and environments variables
        run:  |
          export
          multipass exec router-vm -- lsb_release -a
          multipass info

      - name: Load image
        run: |
          multipass exec router-vm -- docker load --input openwrt-docker-image.tar
          multipass exec router-vm -- docker image ls -a